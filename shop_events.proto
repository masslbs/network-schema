// SPDX-FileCopyrightText: 2024 Mass Labs
//
// SPDX-License-Identifier: MIT

syntax = "proto3";

package market.mass;

import "google/protobuf/timestamp.proto";

import "base_types.proto";

message ShopCurrency {
  uint64 chain_id = 1;
  // Contract address for an ERC20 token.
  // 20 zero bytes for native chain currency, like ETH.
  EthereumAddress address = 2;
};


// First genisis message of a shop.
// Has to be the first message that is written and can only be written once.
message Manifest {
  // shop metadata
  optional string name = 1;
  optional string description = 2;
  optional string profile_picture_url = 3;
  optional string domain = 4;

  message Payee {
    // user handle, like "escrow" or "direct", used during checkout
    string name = 1;
    EthereumAddress address = 2;
    uint64 chain_id = 3;

    // controls how the payment is reaches the payee.
    // true:  forwarded via pay() method
    // false: normal transfer
    // See also:
    // https://github.com/masslbs/contracts/
    // commit: 377aba24796e029945696350db581ec1f65da657
    // file: src/IPayments.sol#L90-L95.
    bool call_as_contract = 4;
  };

  optional Payee add_payee = 5;
  optional Payee remove_payee = 6;
  optional ShopCurrency add_accepted_currency = 7;
  optional ShopCurrency remove_accepted_currency = 8;
  optional ShopCurrency set_base_currency = 9;
}

message Listing {
  uint64 id = 1;
  optional Uint256 price = 2;
  // should be valid JSON
  // TODO: make a json schmea with minimal/required fields
  optional bytes metadata = 3;
  // If the listinghsould be published or not
  optional string view_state = 5;

}

// the number of listing to add or subtract
// Seprated from listing, since this is private 
message ChangeStock {
  uint64 id = 1;
  sint32 change_stoock = 2;
}

// Creates a tag in the shop.
// These can be used to group items into categories.
// There are also a couple of system-level tags, like published.
// Thse are used to filter items in the shop.
message Tag {
  uint64 id = 1;
  optional string name = 2;
  optional bytes add_item_id = 3;
  optional bytes remove_item_id = 4;
  optional bool delete = 5;
}

message Account {
  oneof action {
    // this message is created by the relay when it sees an address being
    // added as a clerk
    OnchainAction add = 1;

    // this message is created by the relay when it sees a clerk's address
    // being deleted.
    OnchainAction remove = 2;
    // Enrolls a keycard; should be signed with EIP-712 instead of EIP-191
    EnrollKeyCard enroll_keycard= 3;
  }

  message OnchainAction {
    EthereumAddress account_address = 1;
    Hash tx = 2;
  }

  // when a new keycard is added to an account
  message EnrollKeyCard {
    EthereumAddress public_key = 1; 
  }

  // Removes a keycard from an account
  message RevokeKeyCard {
    PublicKey public_key = 1; 
  }
} 

message Order {
  uint64 id = 1;
  oneof action {
    ChangeItems change_items = 2;
    ItemsFinalized items_finalized = 3;
    Canceled canceled = 4;
    AddressDetails update_shipping_details = 5;
    Paid paid = 6;
    Commit commit = 7;
  };

  // ChangeItems is used to add or remove items from an order.
  // Only valid before the items were finalized.
  message ChangeItems {
    uint64 item_id = 1;
    sint32 quantity = 2;
  };

  // Created by the relay after a Commit
  // It signals that an order is about to be payed
  // Changing the order after finalization will cause it to be in an 
  // unfinalized state again
  message ItemsFinalized {
    // for verification. Compare against getPaymentId(PaymentReq)
    Hash payment_id = 1;

    Uint256 sub_total = 2;
    Uint256 sales_tax = 3;
    Uint256 total = 4; // = subtotal + sales_tax
    // the list of the hash of all the items being purchased
    // we cannot just refer to them by their id anymore since 
    // since the cart is locked to a particler version
    repeated Hash item_hashes = 5; 
    // PaymentRequest fields that are not obvious to the caller
    string ttl = 6;
    // end of PaymentRequest data
  };

  // Either created by a relay for an order that haven't been payed in time.
  // Or by a clerk, for eg. when the customer steps back from the purchase.
  // This frees up the items locked up in the finalized order.
  message Canceled {
    uint64 timestamp = 1;
  };

  message AddressDetails {
    string name = 1;
    string address1 = 2;
    string address2 = 3;
    string city = 4;
    string postal_code = 5;
    string country = 6;
    string phone_number = 7;
  };

  // Created by a customer when they are ready to purchase an order
  // This is followed by a Finialization message
  message Commit {
    ShopCurrency currency = 1;
    string payee_name = 2;
  };

  // generate by the relay to notify that the oder has been paid for 
  message Paid {
    Hash tx = 1;
  };
}


// ShopEvent is the transport wrapper for a single event in a shop.
message ShopEvent {
  // the every nonce must be unique foreach keycard
  uint64 nonce = 1;
  // Every signed event must be tied to a shop id. This allow the
  // event to processed outside the context of the currenct connection.
  Uint256 shop_id = 2; 
  // the time when this event was created. 
  // The relay should reject any events in the future
  google.protobuf.Timestamp timestamp = 3;

  oneof union {
    Manifest shop_manifest = 4;
    Listing listing = 5;
    Tag tag = 6;
    Order order = 7;
    Account account = 8;
    ChangeStock change_stock = 9;
  }
}
