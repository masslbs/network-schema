// SPDX-FileCopyrightText: 2024 Mass Labs
//
// SPDX-License-Identifier: MIT

syntax = "proto3";

package market.mass;

import "base_types.proto";
import "google/protobuf/timestamp.proto";

// First genisis message of a shop.
// Has to be the first message that is written and can only be written once.
// Can be used to represent the current state of a shop's
message Manifest {
  // shop metadata lives in the NFT
  Uint256 token_id = 1;

  // currency managment
  repeated Payee payees = 2;
  repeated ShopCurrency accepted_currencies = 3;

  // the currency listings are priced in
  ShopCurrency pricing_currency = 4;

  repeated ShippingRegion shipping_regions = 5;
}

// State transition for the manifest
message UpdateManifest {
  optional Payee add_payee = 1;
  optional Payee remove_payee = 2;

  repeated ShopCurrency add_accepted_currencies = 3;
  repeated ShopCurrency remove_accepted_currencies = 4;

  optional ShopCurrency set_pricing_currency = 5;

  repeated ShippingRegion add_shipping_regions = 6;
  repeated string remove_shipping_regions = 7; // by name
}

message Account {
  oneof action {
    // this message is created by the relay when it sees an address being
    // added as a clerk
    OnchainAction add = 1;

    // this message is created by the relay when it sees a clerk's address
    // being deleted.
    OnchainAction remove = 2;

    KeyCardEnroll enroll_keycard = 3;
    PublicKey revoke_keycard = 4;
  }

  // OnchainAction messages mirror the events emitted by
  // the ShopReg smart-contract to the event log of a shop.
  message OnchainAction {
    EthereumAddress account_address = 1;
    Hash tx = 2; // the hash of the transaction that alterd the contract state
  }

  // Binds the keycard to a wallet address of the user
  message KeyCardEnroll {
    PublicKey keycard_pubkey = 1;
    // TODO: move to docs
    // What to do about checkouts of guest keycards?
    // - set to zero address
    // - expose  secret key during checkout for recovering access to order
    EthereumAddress user_wallet = 2;
  }
}

// Used to create a listing
// as well as repersent the latest value after some updates
message Listing {
  ObjectId id = 1;
  Uint256 price = 2;
  ListingMetadata metadata = 3;
  ListingViewState view_state = 4;
  repeated ListingOption options = 5;
  // one for each combination of variations
  repeated ListingStockStatus stock_statuses = 6;
}

// State transition of a listing
message UpdateListing {
  ObjectId id = 1;

  optional Uint256 price = 2;
  optional ListingMetadata metadata = 3;
  optional ListingViewState view_state = 4;

  repeated ListingOption add_options = 5;
  repeated ObjectId remove_option_ids = 6;

  repeated AddVariation add_variations = 7;
  repeated ObjectId remove_variation_ids = 8;

  repeated ListingStockStatus stock_updates = 9;

  message AddVariation {
    ObjectId option_id = 1;
    ListingVariation variation = 2;
  }
}

// the inventory number to add or subtract from a listing
// Seprated from listing, since this is private
message ChangeInventory {
  ObjectId id = 1;
  // each variation must belong to a different option
  repeated ObjectId variation_ids = 2;
  sint32 diff = 3;
}

// Creates a tag in the shop
// also used to represent the current value
message Tag {
  ObjectId id = 1;
  string name = 2;
  repeated ObjectId listing_ids = 3;
  bool deleted = 4;
}

// These can be used to group items into categories.
message UpdateTag {
  ObjectId id = 1;
  optional string rename = 2;
  repeated ObjectId add_listing_ids = 3;
  repeated ObjectId remove_listing_ids = 4;
  optional bool delete = 5;
}

message CreateOrder {
  ObjectId id = 1;
}

message UpdateOrder {
  ObjectId id = 1;

  oneof action {
    Cancel cancel = 2;
    ChangeItems change_items = 3;

    // starting checkout, items locked, payment timer running
    CommitItems commit_items = 4;

    AddressDetails set_invoice_address = 5;
    // no shipping addr assumes invoice addrq
    AddressDetails set_shipping_address = 6;

    // invoice address needs to be filled in before it can be payed
    ChoosePaymentMethod choose_payment = 7;
    PaymentDetails set_payment_details = 8;

    OrderTransaction add_payment_tx = 9;

    string set_shipping_status = 10;
  }

  // Either created by a relay for an order that hasn't been payed in time.
  // Or when the customer steps back from the purchase.
  // This frees up the items locked up in the commited order.
  message Cancel {
    // empty
  }

  // only valid before items were commited to the order
  message ChangeItems {
    repeated OrderedItem adds = 1;
    repeated OrderedItem removes = 2;
  }

  message CommitItems {
    // empty
  }

  // Created by a customer when they are ready to purchase an order
  // This is followed by a PaymentDetails message
  message ChoosePaymentMethod {
    // has to be an accepted currency on the manifest
    ShopCurrency currency = 1;
    Payee payee = 2;
  }
}

// ShopEvent is the transport wrapper for a single event in a shop.
message ShopEvent {
  // The nonce must be unique for each event a keycard creates.
  // The sequence values need to increase monotonicly.
  // Since PB can't discern between the 0 value and
  // a missing field it should start with 1.
  uint64 nonce = 1;

  // Every signed event must be tied to a shop id. This allow the
  // event to processed outside the context of the currenct connection.
  Uint256 shop_id = 2;

  // the time when this event was created.
  // The relay should reject any events from the future
  google.protobuf.Timestamp timestamp = 3;

  oneof union {
    Manifest manifest = 4;
    UpdateManifest update_manifest = 5;
    Account account = 6;

    Listing listing = 7;
    UpdateListing update_listing = 8;

    ChangeInventory change_inventory = 9;

    Tag tag = 10;
    UpdateTag update_tag = 11;

    CreateOrder create_order = 12;
    UpdateOrder update_order = 13;
  }
}
