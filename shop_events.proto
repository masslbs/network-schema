// SPDX-FileCopyrightText: 2024 Mass Labs
//
// SPDX-License-Identifier: MIT

syntax = "proto3";

package market.mass;

import "error.proto";


// ======
// Events
// ======

message Manifest {
  oneof action {
    Create create = 1;
    Update update = 2;
  }
  // First genisis message of a shop.
  // Has to be the first message that is written and can only be written once.
  // Use UpdateShopManifest to make changes.
  message Create {
    // The NFT Token ID used in ShopReg.registerShop().
    // Checkout will ownerOf() this to determine the addr for PurchaseFactory.
    bytes shop_token_id = 1;

    // Website URL of the shop
    // TODO: might change this to metdata inside the NFT URL.
    string domain = 2;

    // the system tag used to list active items
    bytes published_tag_id = 3;

    // erc20s are updated via UpdateShopManifest

    // shop metadata
    string name = 4;
    string description = 5;
    string profile_picture_url = 6;
  }

  // Used to update the shop manifest.
  // The Field enum determines the field to be updated and the value to be used.
  message Update {
    optional string domain = 1;
    optional bytes published_tag_id = 2;
    optional bytes add_erc20_addr = 3;
    optional bytes remove_erc20_addr = 4;
    optional string name = 5;
    optional string description = 6;
    optional string profile_picture_url = 7;
  }
}

message Item {
  bytes id = 1;
  oneof action {
    Create create = 2;
    Update update = 3;
    ChangeStock change_stock = 4;
  }
  // Creates an item in the shop.
  message Create {
    // decimal number as a string.
    // numbers need to be always formatted to 2 decimal places.
    // the demcimal place must use a dot ('.') as the separator.
    string price = 1;
    // should be valid JSON
    // TODO: make a json schmea with minimal/required fields
    bytes metadata = 2;
  }

  // UpdateItem changes the price or metadata of an item.
  // Follows the same pattern as UpdateManifest.
  message Update {
    optional string price = 1;
    optional bytes metadata = 2;
  }

  // private shop information
  // =========================

  // ChangeStock is used to update the stock of on or more items.
  // Created by the relay after an order has been paied for.
  message ChangeStock {
    // length needs to match the length of the diff field
    repeated sint32 diffs = 1;
    optional bytes order_id = 2;
  }
}

message Tag {
  // Creates a tag in the shop.
  // These can be used to group items into categories.
  // There are also a couple of system-level tags, like published.
  // Thse are used to filter items in the shop.
  bytes id = 1;
  oneof action {
    Create create = 2;
    Update update = 3;
  }
  message Create {
    string name = 1;
  }

  message Update {
    optional bytes add_item_id = 1;
    optional bytes remove_item_id = 2;
    optional bool delete = 3;
    optional string rename = 4;
  }
}


// created by the relay when a user enrolls a key card
message NewKeyCard {
  bytes user_wallet_addr = 1;
  bytes card_public_key = 2;
  bool is_guest = 3;
}


message Order {
  bytes id = 1;

  oneof action {
    CreateOrder create_order = 2;
    ChangeItems change_items = 3;
    ItemsFinalized items_finalized = 4;
    OrderCanceled order_canceled = 5;
    PaymentCompleted payment_completed = 6;
  };

  // CreateOrder is used to create a new order.
  message CreateOrder {
  }

  // ChangeItems is used to add or remove items from an order.
  // Only valid before the items were finalized.
  message ChangeItems {
    bytes item_id = 1;
    sint32 quantity = 2;
  };

  // Initiate check out of a cart
  message CommitItems {
    bytes erc20_addr = 1; // unset means vanilla ETH
    uint64 chain_id = 2;
  }


  // Returns an error if the cart is already finalized.
  message CommitItemsError {
    Error error = 1;
  }

  // Created by the relay after a CommitOrderRequest.
  // It signals that an order is about to be payed,
  // and can not be changed anymore.
  message ItemsFinalized {
    // for verification. Compare against getPaymentId(PaymentReq)
    bytes payment_id = 1;

    string sub_total = 2;
    string sales_tax = 3;
    string total = 4; // = subtotal + sales_tax

    // PaymentRequest fields that are not obvious to the caller
    string ttl = 5;
    bytes order_hash = 6;
    bytes currency_addr = 7;
    string total_in_crypto = 8; // "amount" (bigint as string)
    bytes payee_addr = 9;
    bool is_payment_endpoint = 10;
    bytes shop_signature = 11;
    // end of PaymentRequest data
  };

  // Either created by a relay for an order that haven't been payed in time.
  // Or by a clerk, for eg. when the customer steps back from the purchase.
  // This frees up the items locked up in the finalized order.
  message OrderCanceled {
    uint64 timestamp = 1;
  };

  message PaymentCompleted {
    bytes tx_hash = 1;
  };
}

// ShopEvent is the transport wrapper for a single event in a shop.
//
// For signatures we use https://eips.ethereum.org/EIPS/eip-712.
// The structured data definition are specified in `typedData.json`.
// The KeyCard keypair is used to sign or verify the data.
// The Set of all valid keys is all NewKeyCard events
// plus the Relays assigned on the ShopReg smart contract.
//
// Special care must be taken for Events with optional and union fields.
// Specifically these are `UpdateManifest`, `UpdateItem` and `ChangeStock`.
// Some implementations of `eth_signTypedData` are fine with `null` fields,
// while others aren't.
// Therefore, the structured data specification
// needs to be pruned from fields that are not set.
message ShopEvent {
  // The event_id is a unique identifier for an event.
  // Currently it's 32 bytes of random data.
  // It also functions as a nonce for The events signature.
  // The global identifier of an Item should also include the shop_token_id.
  // hash(shop_token_id:signature) might suffice then with a smaller nonce.
  bytes event_id = 1;
  oneof union {
    ShopManifest shop_manifest = 2;
    UpdateShopManifest update_shop_manifest = 3;

    CreateItem create_item = 4;
    UpdateItem update_item = 5;

    CreateTag create_tag = 6;
    UpdateTag update_tag = 7;

    CreateOrder create_order = 8;
    UpdateOrder update_order = 9;

    ChangeStock change_stock = 12;

    NewKeyCard new_key_card = 13;
  }
}
