// SPDX-FileCopyrightText: 2024 Mass Labs
//
// SPDX-License-Identifier: MIT

syntax = "proto3";

package market.mass;

import "shop.proto";

// First genisis message of a shop.
// Has to be the first message that is written and can only be written once.
// Use UpdateShopManifest to make changes.
message Manifest {
  // can only be set once when creating the shop
  optional bytes shop_token_id = 2;
  // shop metadata
  optional string name = 2;
  optional string description = 3;
  optional string profile_picture_url = 4;
  optional string domain = 5;

  message Payee {
    // user handle, like "escrow" or "direct", used during checkout
    string name = 1;
    bytes addr = 2;
    uint64 chain_id = 3;

    // controls how the payment is reaches the payee.
    // true:  forwarded via pay() method
    // false: normal transfer
    // See also:
    // https://github.com/masslbs/contracts/
    // commit: 377aba24796e029945696350db581ec1f65da657
    // file: src/IPayments.sol#L90-L95.
    bool call_as_contract = 4;
  };

  optional Payee add_payee = 7;
  optional Payee remove_payee = 8;

  optional ShopCurrency add_accepted_currency = 9;
  optional ShopCurrency remove_accepted_currency = 10;
  optional ShopCurrency set_base_currency = 11;
}

// Creates an item in the shop.
message Item {
  // See ShopManifest for details
  bytes item_id = 2; // the event_id of the CreateItem event

  // decimal number as a string.
  // numbers need to be always formatted to 2 decimal places.
  // the demcimal place must use a dot ('.') as the separator.
  optional string price = 3;

  // should be valid JSON
  // TODO: make a json schmea with minimal/required fields
  optional bytes metadata = 4;
  // Private
  optional int32 stock = 5;
  optional string view_state = 6;
}


// Creates a tag in the shop.
// These can be used to group items into categories.
// There are also a couple of system-level tags, like published.
// Thse are used to filter items in the shop.
message Tag {
  // See ShopManifest for details
  bytes tag_id = 2;
  optional string name = 3;
  optional bytes add_item_id = 4;
  optional bytes remove_item_id = 5;
  optional bool delete = 6;
}


// created by the relay when a user enrolls a key card
message NewKeyCard {
  // See ShopManifest for details
  bytes user_wallet_addr = 2;
  bytes card_public_key = 3;
  bool is_guest = 4;
}

message Order {
  // See ShopManifest for details
  bytes order_id = 2;

  oneof action {
    ChangeItems change_items = 3;
    ItemsFinalized items_finalized = 4;
    OrderCanceled order_canceled = 5;
    AddressDetails update_shipping_details = 6;
    OrderPaid order_paid = 7;
  };

  // ChangeItems is used to add or remove items from an order.
  // Only valid before the items were finalized.
  message ChangeItems {
    bytes item_id = 1;
    sint32 quantity = 2;
  };

  // Created by the relay after a CommitOrderRequest.
  // It signals that an order is about to be payed,
  // and can not be changed anymore.
  message ItemsFinalized {
    // for verification. Compare against getPaymentId(PaymentReq)
    bytes payment_id = 1;

    string sub_total = 2;
    string sales_tax = 3;
    string total = 4; // = subtotal + sales_tax

    // PaymentRequest fields that are not obvious to the caller
    string ttl = 5;
    bytes order_hash = 6;
    bytes currency_addr = 7;
    bytes total_in_crypto = 8; // big-endian uint256
    bytes payee_addr = 9;
    bool is_payment_endpoint = 10;
    bytes shop_signature = 11;
    // end of PaymentRequest data
  };

  // Either created by a relay for an order that haven't been payed in time.
  // Or by a clerk, for eg. when the customer steps back from the purchase.
  // This frees up the items locked up in the finalized order.
  message OrderCanceled {
    uint64 timestamp = 1;
  };

  message AddressDetails {
    string name = 1;
    string address1 = 2;
    string address2 = 3;
    string city = 4;
    string postal_code = 5;
    string country = 6;
    string phone_number = 7;
  };

  message CommitOrder {
    ShopCurrency currency = 3;
    string payee_name = 4;
  };

  message OrderPaid {
    bytes tx_hash = 1;
  };
}


// ShopEvent is the transport wrapper for a single event in a shop.
//
// For signatures we use https://eips.ethereum.org/EIPS/eip-712.
// The structured data definition are specified in `typedData.json`.
// The KeyCard keypair is used to sign or verify the data.
// The Set of all valid keys is all NewKeyCard events
// plus the Relays assigned on the ShopReg smart contract.
//
// Special care must be taken for Events with optional and union fields.
// Specifically these are `UpdateManifest`, `UpdateItem` and `ChangeStock`.
// Some implementations of `eth_signTypedData` are fine with `null` fields,
// while others aren't.
// Therefore, the structured data specification
// needs to be pruned from fields that are not set.
message ShopEvent {
  // The event_id is a unique identifier for an event.
  // Currently it's 32 bytes of random data.
  // It also functions as a nonce for The events signature.
  // The global identifier of an Item should also include the shop_token_id.
  // hash(shop_token_id:signature) might suffice then with a smaller nonce.
  bytes event_id = 1;
  oneof union {
    Manifest shop_manifest = 2;
    Item create_item = 4;
    Tag update_tag = 7;
    Order create_order = 8;
    NewKeyCard new_key_card = 13;
  }
}
