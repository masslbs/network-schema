// SPDX-FileCopyrightText: 2024 - 2025 Mass Labs
//
// SPDX-License-Identifier: MIT

// Generated from network-schema/subscription.proto at version v4

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: subscription.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The types of objects that events affect
type ObjectType int32

const (
	ObjectType_OBJECT_TYPE_UNSPECIFIED ObjectType = 0 // invalid
	ObjectType_OBJECT_TYPE_LISTING     ObjectType = 1
	ObjectType_OBJECT_TYPE_TAG         ObjectType = 2
	ObjectType_OBJECT_TYPE_ORDER       ObjectType = 3
	// accounts refer to keycard enrollments and customer accounts
	ObjectType_OBJECT_TYPE_ACCOUNT  ObjectType = 4
	ObjectType_OBJECT_TYPE_MANIFEST ObjectType = 5
	// inventory is separated since you must first authenticate to get the events
	ObjectType_OBJECT_TYPE_INVENTORY ObjectType = 6
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0: "OBJECT_TYPE_UNSPECIFIED",
		1: "OBJECT_TYPE_LISTING",
		2: "OBJECT_TYPE_TAG",
		3: "OBJECT_TYPE_ORDER",
		4: "OBJECT_TYPE_ACCOUNT",
		5: "OBJECT_TYPE_MANIFEST",
		6: "OBJECT_TYPE_INVENTORY",
	}
	ObjectType_value = map[string]int32{
		"OBJECT_TYPE_UNSPECIFIED": 0,
		"OBJECT_TYPE_LISTING":     1,
		"OBJECT_TYPE_TAG":         2,
		"OBJECT_TYPE_ORDER":       3,
		"OBJECT_TYPE_ACCOUNT":     4,
		"OBJECT_TYPE_MANIFEST":    5,
		"OBJECT_TYPE_INVENTORY":   6,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_subscription_proto_enumTypes[0].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_subscription_proto_enumTypes[0]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{0}
}

// Used by the client to subscribe to a subset of events from the shop
//
// On success responds with a subscription_id in the payload of GenericResponse
type SubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The relay will send events from the shop log starting from this
	// sequence number.
	StartShopSeqNo uint64 `protobuf:"varint,1,opt,name=start_shop_seq_no,json=startShopSeqNo,proto3" json:"start_shop_seq_no,omitempty"`
	// The id of the shop that is being subscribed to. If an objectType
	// is not specified then the relay will return all the events for
	// the shop given the current level of authentication.
	ShopId *Uint256 `protobuf:"bytes,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// Filter can be applied to return only a subset of events
	Filters       []*SubscriptionRequest_Filter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_subscription_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriptionRequest) GetStartShopSeqNo() uint64 {
	if x != nil {
		return x.StartShopSeqNo
	}
	return 0
}

func (x *SubscriptionRequest) GetShopId() *Uint256 {
	if x != nil {
		return x.ShopId
	}
	return nil
}

func (x *SubscriptionRequest) GetFilters() []*SubscriptionRequest_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Used by the relay to push events to the client.
// Will not send more events until the client has acknowledged the last batch.
//
// Client sends a GenericResponse without an error to acknowledge recption.
// To close a subscription, respond with ERROR_CODES_CLOSE_SUBSCRIPTION
type SubscriptionPushRequest struct {
	state          protoimpl.MessageState                              `protogen:"open.v1"`
	SubscriptionId []byte                                              `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Sets           []*SubscriptionPushRequest_SequencedPartialPatchSet `protobuf:"bytes,2,rep,name=sets,proto3" json:"sets,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscriptionPushRequest) Reset() {
	*x = SubscriptionPushRequest{}
	mi := &file_subscription_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionPushRequest) ProtoMessage() {}

func (x *SubscriptionPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionPushRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionPushRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *SubscriptionPushRequest) GetSubscriptionId() []byte {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *SubscriptionPushRequest) GetSets() []*SubscriptionPushRequest_SequencedPartialPatchSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

// Used by a client to stop a relay from sending more events for a given subscription
type SubscriptionCancelRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId []byte                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscriptionCancelRequest) Reset() {
	*x = SubscriptionCancelRequest{}
	mi := &file_subscription_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionCancelRequest) ProtoMessage() {}

func (x *SubscriptionCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionCancelRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionCancelRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *SubscriptionCancelRequest) GetSubscriptionId() []byte {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

type SubscriptionRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Which object is being subscribed to. Subscribing to an object
	// will return a stream of events
	// that modify that object type. For example subscribing to LISTING
	// will return a stream of all the events
	// that modify listings in the shop.
	ObjectType ObjectType `protobuf:"varint,3,opt,name=object_type,json=objectType,proto3,enum=market.mass.ObjectType" json:"object_type,omitempty"`
	// Optional subscribe to only events that modify a single item.
	// We assume object_id is only unique for a given object_type, so
	// object_type is required.
	ObjectId      *ObjectId `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3,oneof" json:"object_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionRequest_Filter) Reset() {
	*x = SubscriptionRequest_Filter{}
	mi := &file_subscription_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest_Filter) ProtoMessage() {}

func (x *SubscriptionRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest_Filter.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest_Filter) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubscriptionRequest_Filter) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_OBJECT_TYPE_UNSPECIFIED
}

func (x *SubscriptionRequest_Filter) GetObjectId() *ObjectId {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type SubscriptionPushRequest_SequencedPartialPatchSet struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ShopSeqNo      uint64                 `protobuf:"varint,1,opt,name=shop_seq_no,json=shopSeqNo,proto3" json:"shop_seq_no,omitempty"`                // sequence number of the patchSet in the shop log
	PatchLeafIndex uint32                 `protobuf:"varint,2,opt,name=patch_leaf_index,json=patchLeafIndex,proto3" json:"patch_leaf_index,omitempty"` // index of the patch in the patch set
	Header         []byte                 `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`                                          // cbor patchSet header data (see go/cbor/patches.go)
	Signature      []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`                                    // eip191 signature of the above
	Patches        [][]byte               `protobuf:"bytes,5,rep,name=patches,proto3" json:"patches,omitempty"`                                        // array of cbor patch data
	Proofs         [][]byte               `protobuf:"bytes,6,rep,name=proofs,proto3" json:"proofs,omitempty"`                                          // array of cbor proof data [index, tree_size, [proof1, proof2, ...]]
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) Reset() {
	*x = SubscriptionPushRequest_SequencedPartialPatchSet{}
	mi := &file_subscription_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionPushRequest_SequencedPartialPatchSet) ProtoMessage() {}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionPushRequest_SequencedPartialPatchSet.ProtoReflect.Descriptor instead.
func (*SubscriptionPushRequest_SequencedPartialPatchSet) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) GetShopSeqNo() uint64 {
	if x != nil {
		return x.ShopSeqNo
	}
	return 0
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) GetPatchLeafIndex() uint32 {
	if x != nil {
		return x.PatchLeafIndex
	}
	return 0
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) GetPatches() [][]byte {
	if x != nil {
		return x.Patches
	}
	return nil
}

func (x *SubscriptionPushRequest_SequencedPartialPatchSet) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

var File_subscription_proto protoreflect.FileDescriptor

const file_subscription_proto_rawDesc = "" +
	"\n" +
	"\x12subscription.proto\x12\vmarket.mass\x1a\x10base_types.proto\"\xbe\x02\n" +
	"\x13SubscriptionRequest\x12)\n" +
	"\x11start_shop_seq_no\x18\x01 \x01(\x04R\x0estartShopSeqNo\x12-\n" +
	"\ashop_id\x18\x02 \x01(\v2\x14.market.mass.Uint256R\x06shopId\x12A\n" +
	"\afilters\x18\x03 \x03(\v2'.market.mass.SubscriptionRequest.FilterR\afilters\x1a\x89\x01\n" +
	"\x06Filter\x128\n" +
	"\vobject_type\x18\x03 \x01(\x0e2\x17.market.mass.ObjectTypeR\n" +
	"objectType\x127\n" +
	"\tobject_id\x18\x04 \x01(\v2\x15.market.mass.ObjectIdH\x00R\bobjectId\x88\x01\x01B\f\n" +
	"\n" +
	"_object_id\"\xe4\x02\n" +
	"\x17SubscriptionPushRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\fR\x0esubscriptionId\x12Q\n" +
	"\x04sets\x18\x02 \x03(\v2=.market.mass.SubscriptionPushRequest.SequencedPartialPatchSetR\x04sets\x1a\xcc\x01\n" +
	"\x18SequencedPartialPatchSet\x12\x1e\n" +
	"\vshop_seq_no\x18\x01 \x01(\x04R\tshopSeqNo\x12(\n" +
	"\x10patch_leaf_index\x18\x02 \x01(\rR\x0epatchLeafIndex\x12\x16\n" +
	"\x06header\x18\x03 \x01(\fR\x06header\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\x12\x18\n" +
	"\apatches\x18\x05 \x03(\fR\apatches\x12\x16\n" +
	"\x06proofs\x18\x06 \x03(\fR\x06proofs\"D\n" +
	"\x19SubscriptionCancelRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\fR\x0esubscriptionId*\xbc\x01\n" +
	"\n" +
	"ObjectType\x12\x1b\n" +
	"\x17OBJECT_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13OBJECT_TYPE_LISTING\x10\x01\x12\x13\n" +
	"\x0fOBJECT_TYPE_TAG\x10\x02\x12\x15\n" +
	"\x11OBJECT_TYPE_ORDER\x10\x03\x12\x17\n" +
	"\x13OBJECT_TYPE_ACCOUNT\x10\x04\x12\x18\n" +
	"\x14OBJECT_TYPE_MANIFEST\x10\x05\x12\x19\n" +
	"\x15OBJECT_TYPE_INVENTORY\x10\x06b\x06proto3"

var (
	file_subscription_proto_rawDescOnce sync.Once
	file_subscription_proto_rawDescData []byte
)

func file_subscription_proto_rawDescGZIP() []byte {
	file_subscription_proto_rawDescOnce.Do(func() {
		file_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subscription_proto_rawDesc), len(file_subscription_proto_rawDesc)))
	})
	return file_subscription_proto_rawDescData
}

var file_subscription_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_subscription_proto_goTypes = []any{
	(ObjectType)(0),                                          // 0: market.mass.ObjectType
	(*SubscriptionRequest)(nil),                              // 1: market.mass.SubscriptionRequest
	(*SubscriptionPushRequest)(nil),                          // 2: market.mass.SubscriptionPushRequest
	(*SubscriptionCancelRequest)(nil),                        // 3: market.mass.SubscriptionCancelRequest
	(*SubscriptionRequest_Filter)(nil),                       // 4: market.mass.SubscriptionRequest.Filter
	(*SubscriptionPushRequest_SequencedPartialPatchSet)(nil), // 5: market.mass.SubscriptionPushRequest.SequencedPartialPatchSet
	(*Uint256)(nil),                                          // 6: market.mass.Uint256
	(*ObjectId)(nil),                                         // 7: market.mass.ObjectId
}
var file_subscription_proto_depIdxs = []int32{
	6, // 0: market.mass.SubscriptionRequest.shop_id:type_name -> market.mass.Uint256
	4, // 1: market.mass.SubscriptionRequest.filters:type_name -> market.mass.SubscriptionRequest.Filter
	5, // 2: market.mass.SubscriptionPushRequest.sets:type_name -> market.mass.SubscriptionPushRequest.SequencedPartialPatchSet
	0, // 3: market.mass.SubscriptionRequest.Filter.object_type:type_name -> market.mass.ObjectType
	7, // 4: market.mass.SubscriptionRequest.Filter.object_id:type_name -> market.mass.ObjectId
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_subscription_proto_init() }
func file_subscription_proto_init() {
	if File_subscription_proto != nil {
		return
	}
	file_base_types_proto_init()
	file_subscription_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subscription_proto_rawDesc), len(file_subscription_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subscription_proto_goTypes,
		DependencyIndexes: file_subscription_proto_depIdxs,
		EnumInfos:         file_subscription_proto_enumTypes,
		MessageInfos:      file_subscription_proto_msgTypes,
	}.Build()
	File_subscription_proto = out.File
	file_subscription_proto_goTypes = nil
	file_subscription_proto_depIdxs = nil
}
