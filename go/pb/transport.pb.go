// SPDX-FileCopyrightText: 2023 - 2025 Mass Labs
//
// SPDX-License-Identifier: MIT

// Generated from network-schema/transport.proto at version v4

// This file defines the transport protocol between relays and clients.
// It's main purpose is transfer of events of the higher application levels.
// It is orthogonal to the shop registry and other smart contracts.
//
// Messages must be prefixed with their acompanying encoding number
// as a single byte. encoding.txt defines the number for each message.
//
// Furthermore, we expect only one message per write/binary frame.
// This means no buffering of multiple messages into a single write.
// The protocol offers repeated fields where approriate for higher throughput.
// A suggested transport is WebSocket over HTTPS but the protocol is
// agnostic, as long as it can handle binary data and keeps the framing intact.
// This design, specifically the push from the relay to client, assumes
// the transport does not offer backpressure. No further pushes are sent
// until they are acknowledged by the client.
//
// For upgrades there exists a VERSION file in the root of the repository.
// The VERSION is a single unsigned integer, incremented for each change.
// The client and relay must agree on the VERSION before starting the protocol.
// In the case of WebSocket, the VERSION can be compared via the URL.
// The relay must close the connection if the VERSION isn't supported.
//
// As of this version, the protocol is grouped into 4 areas:
// 1) the transport (this file)
// 2) authentication for establishing access rights
// 3) shop specific requets
// 4) shop events
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: transport.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used by authenticated clients to write events to the relay.
// Requires prior successful authentication.
type PatchSetWriteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatchSet      []byte                 `protobuf:"bytes,1,opt,name=patch_set,json=patchSet,proto3" json:"patch_set,omitempty"` // CBOR encoded
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchSetWriteRequest) Reset() {
	*x = PatchSetWriteRequest{}
	mi := &file_transport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchSetWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchSetWriteRequest) ProtoMessage() {}

func (x *PatchSetWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchSetWriteRequest.ProtoReflect.Descriptor instead.
func (*PatchSetWriteRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0}
}

func (x *PatchSetWriteRequest) GetPatchSet() []byte {
	if x != nil {
		return x.PatchSet
	}
	return nil
}

// Sent by the relay to signal the number of unpushed patches per subscription.
type SyncStatusRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId  uint64                 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UnpushedPatches uint64                 `protobuf:"varint,2,opt,name=unpushed_patches,json=unpushedPatches,proto3" json:"unpushed_patches,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SyncStatusRequest) Reset() {
	*x = SyncStatusRequest{}
	mi := &file_transport_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusRequest) ProtoMessage() {}

func (x *SyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusRequest.ProtoReflect.Descriptor instead.
func (*SyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1}
}

func (x *SyncStatusRequest) GetSubscriptionId() uint64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *SyncStatusRequest) GetUnpushedPatches() uint64 {
	if x != nil {
		return x.UnpushedPatches
	}
	return 0
}

// Sent by the relay to check for the clients liveness.
// The client needs to respond with a PingResponse.
// The relay will close the connection if the client doesn't respond 3 times.
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_transport_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{2}
}

var File_transport_proto protoreflect.FileDescriptor

const file_transport_proto_rawDesc = "" +
	"\n" +
	"\x0ftransport.proto\x12\vmarket.mass\"3\n" +
	"\x14PatchSetWriteRequest\x12\x1b\n" +
	"\tpatch_set\x18\x01 \x01(\fR\bpatchSet\"g\n" +
	"\x11SyncStatusRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\x04R\x0esubscriptionId\x12)\n" +
	"\x10unpushed_patches\x18\x02 \x01(\x04R\x0funpushedPatches\"\r\n" +
	"\vPingRequestb\x06proto3"

var (
	file_transport_proto_rawDescOnce sync.Once
	file_transport_proto_rawDescData []byte
)

func file_transport_proto_rawDescGZIP() []byte {
	file_transport_proto_rawDescOnce.Do(func() {
		file_transport_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transport_proto_rawDesc), len(file_transport_proto_rawDesc)))
	})
	return file_transport_proto_rawDescData
}

var file_transport_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_transport_proto_goTypes = []any{
	(*PatchSetWriteRequest)(nil), // 0: market.mass.PatchSetWriteRequest
	(*SyncStatusRequest)(nil),    // 1: market.mass.SyncStatusRequest
	(*PingRequest)(nil),          // 2: market.mass.PingRequest
}
var file_transport_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_transport_proto_init() }
func file_transport_proto_init() {
	if File_transport_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transport_proto_rawDesc), len(file_transport_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transport_proto_goTypes,
		DependencyIndexes: file_transport_proto_depIdxs,
		MessageInfos:      file_transport_proto_msgTypes,
	}.Build()
	File_transport_proto = out.File
	file_transport_proto_goTypes = nil
	file_transport_proto_depIdxs = nil
}
