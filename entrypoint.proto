// SPDX-FileCopyrightText: 2023 - 2024 Mass Labs
//
// SPDX-License-Identifier: MIT

// This file defines the transport protocol between relays and clients.
// It's main purpose is transfer of events of the higher application levels.
// It is orthogonal to the shop registry and other smart contracts.
//
// Messages must be prefixed with their acompanying encoding number
// as a single byte. encoding.txt defines the number for each message.
//
// Furthermore, we expect only one message per write/binary frame.
// This means no buffering of multiple messages into a single write.
// The protocol offers repeated fields where approriate for higher throughput.
// A suggested transport is WebSocket over HTTPS but the protocol is
// agnostic, as long as it can handle binary data and keeps the framing intact.
// This design, specifically the push from the relay to client, assumes
// the transport does not offer backpressure. No further pushes are sent
// until they are acknowledged by the client.
//
// For upgrades there exists a VERSION file in the root of the repository.
// The VERSION is a single unsigned integer, incremented for each change.
// The client and relay must agree on the VERSION before starting the protocol.
// In the case of WebSocket, the VERSION can be compared via the URL.
// The relay must close the connection if the VERSION isn't supported.

syntax = "proto3";

package market.mass;

import "authentication.proto";
import "shop_requests.proto";
import "subscription.proto";
import "transport.proto";

// This defines a singular entry point message that is to be read from the
// a transport
message EntryPointMessage {
  oneof message {
    // network messages
    EventWriteRequest event_write_request = 1;
    EventWriteResponse event_write_response = 2;
    // subscriptions
    SubscriptionRequest subscription_request = 3;
    SubscriptionResponse subscription_response = 4;
    SubscriptionCancel subscription_cancel = 5;
    SubscriptionPush subscription_push = 6;
    SubscriptionPushResponse subscription_push_response = 7;
    // backpressure handling
    SyncStatusRequest sync_status_request = 8;
    SyncStatusResponse sync_status_response = 9;
    PingRequest ping_request = 10;
    PingResponse ping_response = 11;
    // shop requests
    GetBlobUploadURLRequest get_blob_upload_url_request = 12;
    GetBlobUploadURLResponse get_blob_upload_url_response = 13;
    // authentification messages
    AuthenticateRequest auth_request = 14; 
    AuthenticateResponse auth_response = 15;
    ChallengeSolvedRequest challenge_solution_request = 16;
    ChallengeSolvedResponse challenge_solution_response = 17;
  }
}
