// SPDX-FileCopyrightText: 2023 - 2025 Mass Labs
//
// SPDX-License-Identifier: MIT

// This file defines the transport protocol between relays and clients.
// Its main purpose is transfer of events of the higher application levels.
// It is orthogonal to the Shop Registry and other smart contracts.
//
// Messages must be prefixed with their accompanying encoding number
// as a single byte. encoding.txt defines the number for each message.
//
// Furthermore, we expect only one message per write/binary frame.
// This means no buffering of multiple messages into a single write.
// The protocol offers repeated fields where appropriate for higher throughput.
// A suggested transport is WebSocket over HTTPS, but the protocol is
// agnostic, as long as the transport used can handle binary data and keeps the
// framing intact.
// This design, specifically the push from the relay to client, assumes
// the transport does not produce backpressure. No further pushes are sent
// until they are acknowledged by the client.
//
// For upgrades there exists a VERSION file in the root of the repository.
// The VERSION is a single unsigned integer, incremented for each change.
// The client and relay must agree on the VERSION before starting the protocol.
// In the case of WebSocket, the VERSION can be compared via the URL.
// The relay must close the connection if the VERSION isn't supported.
//
// As of this version, the protocol is grouped into 4 areas:
// 1) the transport (this file)
// 2) authentication for establishing access rights
// 3) shop specific request
// 4) shop events
//
syntax = "proto3";

package market.mass;

// Used by authenticated clients to write events to the relay.
// Requires prior successful authentication.
message PatchSetWriteRequest {
  bytes patch_set = 1; // CBOR encoded
}

// Sent by the relay to signal the number of unpushed patches per subscription.
message SyncStatusRequest {
  uint64 subscription_id = 1;
  uint64 unpushed_patches = 2;
}

// Sent by the relay to check for the client's liveness.
// The client needs to respond with a PingResponse.
// The relay will close the connection if the client doesn't respond 3 times.
message PingRequest {
  // empty
}
