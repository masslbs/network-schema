// SPDX-FileCopyrightText: 2023 - 2024 Mass Labs
//
// SPDX-License-Identifier: MIT

// This file defines the transport protocol between relays and clients.
// It's main purpose is transfer of events of the higher application levels.
// It is orthogonal to the shop registry and other smart contracts.
//
// Messages must be prefixed with their acompanying encoding number
// as a single byte. encoding.txt defines the number for each message.
//
// Furthermore, we expect only one message per write/binary frame.
// This means no buffering of multiple messages into a single write.
// The protocol offers repeated fields where approriate for higher throughput.
// A suggested transport is WebSocket over HTTPS but the protocol is
// agnostic, as long as it can handle binary data and keeps the framing intact.
// This design, specifically the push from the relay to client, assumes
// the transport does not offer backpressure. No further pushes are sent
// until they are acknowledged by the client.
//
// For upgrades there exists a VERSION file in the root of the repository.
// The VERSION is a single unsigned integer, incremented for each change.
// The client and relay must agree on the VERSION before starting the protocol.
// In the case of WebSocket, the VERSION can be compared via the URL.
// The relay must close the connection if the VERSION isn't supported.
//
// As of this version, the protocol is grouped into 4 areas:
// 1) the transport (this file)
// 2) authentication for establishing access rights
// 3) shop specific requets
// 4) shop events
//
syntax = "proto3";

package market.mass;

import "google/protobuf/any.proto";

import "error.proto";

// ====================
// Event syncronization
// ====================

message SignedEvent {
  google.protobuf.Any event = 1;
  bytes signature = 2; // EIP-191 of any.value
}

// Used by the Client to write a single event to the shop.
message EventWriteRequest {
  SignedEvent event = 2;
}

// Might return an error if the event or its signature is invalid.
// If no error is returned,
// the new_shop_hash is the hash of the shop with the new event applied.
// The event_sequence_no is the index of the event in the shops log.
message EventWriteResponse {
  Error error = 2;
  bytes new_shop_hash = 3;
  uint64 event_sequence_no = 4;
}

// Used by the relay to push events to the client.
// Will not sent more events until the client has acknowledged the last batch.
message EventPushRequest {
  repeated SignedEvent events = 2;
}

message EventPushResponse {
  Error error = 2;
}

// Sent by the relay to signal the number of unpushed events.
message SyncStatusRequest {
  uint64 unpushed_events = 2;
}

message SyncStatusResponse {
  Error error = 2;
}

// Sent by the relay to check for the clients liveness.
// The client needs to respond with a PingResponse.
// The relay will close the connection if the client doesn't respond 3 times.
message PingRequest{
}

message PingResponse {
  Error error = 2;
}
